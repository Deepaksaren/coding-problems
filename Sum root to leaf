Sum root to leaf

Problem Statement
Detailed explanation ( Input/output format, Notes, Images )


Sample Input 1:
2
9 5 3 3 2 -1 1 3 2 -1 -1 -1 -1 -1 -1 -1 -1
1 3 2 2 1 4 5 -1 -1 1 -1 1 2 -1 6 -1 -1 -1 -1 -1 -1 -1 -1 
Sample Output 1:
20948
5182
Explanation Of Sample Input 1:
Test case 1:
The above tree looks like:-

All possible paths from root to leaf are:
9->5->3->3 giving number 9533
9->5->3->2 giving number 9532
9->5->2 giving number 952
9->3->1 giving number 931

The total sum of all possible root to leaf paths numbers is 9533+9532+952+931 = 20948 and 20948 mod 10^9 + 7 = 20948

Test case 2:
All possible paths from root to leaf are:
1->3->2 giving number 132
1->3->1->1 giving number 1311
1->2->4->1 giving number 1241
1->2->4->2 giving number 1242
1->2->5->6 giving number 1256
The total sum of all possible root to leaf paths numbers is 132+1311+1241+1242+1256 = 5182
Sample Input 2:
2
1 3 4 1 2 -1 6 -1 -1 -1 -1 -1 -1 
1 2 2 5 3 -1 1 -1 -1 3 -1 -1 -1 -1 -1
Sample Output 2:
409
1479

from os import *
from sys import *
from collections import *
from math import *

# Binary tree node class for reference:
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def helper(root,cursum, ans):
    if root.left is None and root.right is None:
        cursum = cursum*10 + root.data
        cursum %= (10**9+7)
        ans += cursum
        ans %= (10**9+7)
        return ans
    cursum = cursum*10 + root.data

    if root.left is not None:
        ans = helper(root.left, cursum, ans)
        
    if root.right is not None:
        ans = helper(root.right, cursum, ans)
    return ans

def rootToLeafSum(root):
	# Write your code here.
    # leafsum = 0
    ans = 0
    ans = helper(root, 0, ans)
    return ans
    
	
