Problem Statement
Given a number of pages in N different books and M students. The books are arranged in ascending order of the number of pages. 
Every student is assigned to read some consecutive books. 
The task is to assign books in such a way that the maximum number of pages assigned to a student is minimum.

Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
4 2
12 34 67 90
Sample Output 1:
113
Explanation Of Sample Input 1:
Let’s consider ‘n=4’ (number of books ) and ‘m=2’ (number of students)
‘arr = { 12, 34, 67, 90 }’. And ‘m= 2’.
All possible way to allocate the ‘4’ books in ‘2’ number of students is-

12 | 34, 67, 90 - sum of all the pages of books which allocated to student 1 is ‘12’, and student two is ‘34+ 67+ 90 = 191’ so maximum is ‘max(12, 191)= 191’.
12, 34 | 67, 90 - sum of all the pages of books which allocated to student 1 is ‘12+ 34 = 46’, and student two is ‘67+ 90 = 157’ so maximum is ‘max(46, 157)= 157’.
12, 34, 67 | 90 - sum of all the pages of books which allocated to student 1 is ‘12+ 34 +67 = 113’, and student two is ‘90’ so maximum is ‘max(113, 90)= 113’.

So possible maximum number of pages which allocated to a single student is { 191, 157, 113 } 
But you have to return a minimum of this so return ‘min(191,157, 113) =113’.

Hence answer is ‘113’.
Sample Input 2:
5 4
25 46 28 49 24
Sample Output 2:
71


from os import *
import sys
from collections import *
from math import *

def isPossible(arr, n, m, mid):
    student_count = 1
    allocated_page = 0
    for i in range(n):
        if (allocated_page + arr[i]) > mid:
            student_count += 1
            allocated_page = arr[i] 
            if allocated_page > mid:
                return False
        else:
            allocated_page += arr[i]
    if student_count <= m:
        return True 
    else:
        return False


def allocateBooks(arr, n, m):
    start = float('inf')
    end = 0
    for i in range(n):
        start = min(start, arr[i])
        end += arr[i]
    mid = (start+end) // 2
    while start <= end:
        # mid = (start+end) // 2
        if isPossible(arr, n, m, mid):
            end = mid-1
        else:
            start = mid+1
        mid = (start + end) //2
    return start
    
    

